//10/18/23
//Sensor Initialization Code for Breadboard Fall 2023 ASUxASCENDxSTRATODEVILS
//By Jesse Ontiveros
//Code lacks GPS code, AdaFruit RTD module code, & RTD custom analog circuit 
#include <Wire.h>
#include <Arduino_LSM9DS1.h>
#include <Adafruit_Sensor.h>
#include "Adafruit_BME680.h"
#include "Adafruit_SGP30.h"
#include "Adafruit_SHT31.h" // Add this line for the SHT31-D sensor
#include <SPI.h>
#include <SD.h>

#define BME_SCK 13
#define BME_MISO 12
#define BME_MOSI 11
#define BME_CS 10

#define SEALEVELPRESSURE_HPA (1013.25)

Adafruit_BME680 bme;  // BME680 sensor
Adafruit_SGP30 sgp;   // SGP30 sensor
Adafruit_SHT31 sht31; // SHT31-D sensor

const int sensorPin = A7; // TMP36 analog temperature sensor
const int chipSelect = 2; // SD card chip select pin

bool enableHeater = false;
uint8_t loopCnt = 0;

File dataFile;

void setup() {
  Serial.begin(9600);
  while (!Serial) { delay(10); } // Wait for serial console to open!

  Serial.println("Sensor Fusion Test");

  if (!bme.begin()) {
    Serial.println("Could not find a valid BME680 sensor, check wiring!");
    while (1);
  }

  if (!sgp.begin()){
    Serial.println("Could not find a valid SGP30 sensor, check wiring!");
    while (1);
  }

  if (!IMU.begin()) {
    Serial.println("Failed to initialize IMU!");
    while (1);
  }

  Serial.print("Found SGP30 serial #");
  Serial.print(sgp.serialnumber[0], HEX);
  Serial.print(sgp.serialnumber[1], HEX);
  Serial.println(sgp.serialnumber[2], HEX);

  // Set up oversampling and filter initialization for BME680
  bme.setTemperatureOversampling(BME680_OS_8X);
  bme.setHumidityOversampling(BME680_OS_2X);
  bme.setPressureOversampling(BME680_OS_4X);
  bme.setIIRFilterSize(BME680_FILTER_SIZE_3);
  bme.setGasHeater(320, 150); // 320*C for 150 ms

  // Initialize SHT31-D sensor
  if (!sht31.begin(0x44)) {   // Set to 0x45 for alternate I2C address
    Serial.println("Couldn't find SHT31");
    while (1);
  }

  Serial.print("Heater Enabled State: ");
  if (sht31.isHeaterEnabled())
    Serial.println("ENABLED");
  else
    Serial.println("DISABLED");

  // Initialize TMP36 sensor
  pinMode(sensorPin, INPUT);

  Serial.print("Initializing SD card...");
  if (!SD.begin(chipSelect)) {
    Serial.println("Card failed, or not present");
    while (1);
  }
  Serial.println("card initialized.");
  
  // Open the file for data logging
  dataFile = SD.open("datalog.txt", FILE_WRITE);
  if (!dataFile) {
    Serial.println("error opening datalog.txt");
  } else {
    // Add a header row with sensor names
    dataFile.println("Temperature (TMP36),Temperature (BME680),Pressure (hPa),Altitude (m),Humidity (%),Gas Resistance (KOhms),TVOC (ppb),eCO2 (ppm),Acceleration (X),Acceleration (Y),Acceleration (Z)");
  }
}

int counter = 0;
void loop() {
  // Read data from the BME680 sensor
  if (!bme.performReading()) {
    Serial.println("Failed to perform reading from BME680 :(");
    return;
  }

  // Read data from the SGP30 sensor
  if (!sgp.IAQmeasure()) {
    Serial.println("Measurement from SGP30 failed");
    return;
  }

  // Read data from the SHT31-D sensor
  float t = sht31.readTemperature();
  float h = sht31.readHumidity();

  if (!isnan(t)) {
    Serial.print("SHT31 - Temp *C = "); Serial.print(t); Serial.print("\t\t");
  } else {
    Serial.println("Failed to read SHT31 temperature");
  }

  if (!isnan(h)) {
    Serial.print("SHT31 - Hum. % = "); Serial.println(h);
  } else {
    Serial.println("Failed to read SHT31 humidity");
  }

  float x, y, z;

  if (IMU.accelerationAvailable()) {
    IMU.readAcceleration(x, y, z);
  }

  int reading = analogRead(sensorPin);
  float voltage = reading * (3.3 / 1024.0);
  float temperature = (voltage - 0.5) * 100;
  
  Serial.print("TMP36 - Temperature = ");
  Serial.print(temperature);
  Serial.println(" *C");

  Serial.print("BME680 - Temperature = ");
  Serial.print(bme.temperature);
  Serial.println(" *C");

  Serial.print("BME680 - Pressure = ");
  Serial.print(bme.pressure / 100.0);
  Serial.println(" hPa");

  float altitude = bme.readAltitude(SEALEVELPRESSURE_HPA);
  Serial.print("BME680 - Altitude = ");
  Serial.print(altitude);
  Serial.println(" meters");

  Serial.print("BME680 - Humidity = ");
  Serial.print(bme.humidity);
  Serial.println(" %");

  Serial.print("BME680 - Gas = ");
  Serial.print(bme.gas_resistance / 1000.0);
  Serial.println(" KOhms");

  Serial.print("SGP30 - TVOC (ppb) = "); 
  Serial.print(sgp.TVOC); 
  Serial.print("\t eCO2 (ppm) = "); 
  Serial.println(sgp.eCO2);

  Serial.print("LSM9DS1 - Acceleration (g's) - X: "); 
  Serial.print(x);
  Serial.print(" Y: "); 
  Serial.print(y);
  Serial.print(" Z: "); 
  Serial.println(z);
  Serial.println("-----------------------------------------------------");

  // Create a string for sensor data with labels and units
  String dataString = "Temperature (TMP36) (°C): " + String(temperature) + "," +
                     "Temperature (BME680) (°C): " + String(bme.temperature) + "," +
                     "Pressure (BME680) (hPa): " + String(bme.pressure / 100.0) + "," +
                     "Altitude (BME680) (m): " + String(altitude) + "," +
                     "Humidity (BME680) (%): " + String(bme.humidity) + "," +
                     "Gas Resistance (BME680) (KOhms): " + String(bme.gas_resistance / 1000.0) + "," +
                     "TVOC (SGP30) (ppb): " + String(sgp.TVOC) + "," +
                     "eCO2 (SGP30) (ppm): " + String(sgp.eCO2) + "," +
                     "Acceleration (LSM9DS1) (X) (g's): " + String(x) + "," +
                     "Acceleration (LSM9DS1) (Y) (g's): " + String(y) + "," +
                     "Acceleration (LSM9DS1) (Z) (g's): " + String(z);

  // Write sensor data to the SD card
  if (dataFile) {
    dataFile.println(dataString);
    dataFile.flush(); // Ensure data is written immediately
    Serial.println(dataString);
  } else {
    Serial.println("error writing to datalog.txt");
  }

  delay(2000);

  counter++;
  if (counter == 30) {
    counter = 0;
    uint16_t TVOC_base, eCO2_base;
    if (!sgp.getIAQBaseline(&eCO2_base, &TVOC_base)) {
      Serial.println("Failed to get SGP30 baseline readings");
      return;
    }
    Serial.print("****SGP30 Baseline values: eCO2: 0x"); 
    Serial.print(eCO2_base, HEX);
    Serial.print(" & TVOC: 0x"); 
    Serial.println(TVOC_base, HEX);
  }
}
